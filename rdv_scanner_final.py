#!/usr/bin/env python3
"""
Scanner RDV Pr√©fecture - Version Finale Optimis√©e
Int√®gre toutes les optimisations valid√©es avec retry automatique
"""
import os
import sys
import time
import logging
from datetime import datetime
from typing import Dict, Any
from dotenv import load_dotenv
from playwright.sync_api import sync_playwright
from gemini_solver import GeminiCaptchaSolver
from notifier import Notifier

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('rdv_scanner.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


class OptimizedRDVScanner:
    """Scanner RDV optimis√© avec retry automatique"""
    
    def __init__(self):
        load_dotenv()
        self.url = os.getenv('PAGE_1_URL')
        self.headless = os.getenv('HEADLESS', 'false').lower() == 'true'
        self.check_interval = int(os.getenv('CHECK_INTERVAL', '300'))
        self.max_retries = 3
        
        if not self.url:
            raise ValueError("PAGE_1_URL doit √™tre configur√© dans .env")
        
        self.captcha_solver = GeminiCaptchaSolver()
        self.notifier = Notifier()
        
        logger.info(f"Scanner initialis√© pour: {self.url}")
        logger.info(f"Mode headless: {self.headless}")
        logger.info(f"Intervalle: {self.check_interval}s")
    
    def try_captcha_submission(self, page, attempt):
        """
        Tente une soumission de captcha
        
        Returns:
            Dict avec status et informations
        """
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        result = {
            'status': 'ERROR',
            'message': '',
            'attempt': attempt,
            'captcha_text': '',
            'url': '',
            'available': False
        }
        
        try:
            # Navigation seulement si premi√®re tentative
            if attempt == 1:
                logger.info("üöÄ Navigation vers la page...")
                page.goto(self.url, wait_until='domcontentloaded', timeout=30000)
                logger.info("‚úÖ Page charg√©e")
            else:
                logger.info("üîÑ Continuation sur la page existante...")
            
            # Scroll et d√©tection
            page.evaluate('window.scrollBy(0, 500)')
            page.wait_for_timeout(500)
            
            captcha_field = page.locator('input[name="captchaUsercode"]')
            if captcha_field.count() == 0:
                result['message'] = "Champ captcha non trouv√©"
                return result
            
            # Extraction du captcha
            captcha_images = page.locator('img')
            if captcha_images.count() == 0:
                result['message'] = "Image captcha non trouv√©e"
                return result
            
            os.makedirs('screenshots', exist_ok=True)
            captcha_path = f"screenshots/captcha_{timestamp}_attempt_{attempt}.png"
            
            captcha_images.first.screenshot(path=captcha_path)
            logger.info(f"üì∏ Captcha sauvegard√©: {captcha_path}")
            
            # R√©solution avec Gemini
            if not self.captcha_solver.is_available():
                result['message'] = "Gemini non disponible"
                return result
            
            captcha_text = self.captcha_solver.solve_captcha_from_file(captcha_path)
            if not captcha_text:
                result['message'] = "Gemini n'a pas pu r√©soudre le captcha"
                return result
                
            logger.info(f"‚úÖ Gemini: '{captcha_text}' ({len(captcha_text)} caract√®res)")
            result['captcha_text'] = captcha_text
            
            # Remplissage et soumission
            captcha_field.clear()
            captcha_field.fill(captcha_text)
            
            submit_btn = page.locator('button[type="submit"]')
            if submit_btn.count() == 0:
                result['message'] = "Bouton submit non trouv√©"
                return result
            
            # Capture avant clic
            before_path = f"screenshots/before_submit_{timestamp}_attempt_{attempt}.png"
            page.screenshot(path=before_path, full_page=True)
            
            # Clic et attente
            page.wait_for_timeout(1000)
            submit_btn.click()
            logger.info("‚úÖ Formulaire soumis")
            
            # Attendre la r√©ponse
            page.wait_for_timeout(5000)
            
            # Analyser la r√©ponse
            current_url = page.url
            body_text = page.locator('body').inner_text()
            
            # Capture apr√®s clic
            after_path = f"screenshots/after_submit_{timestamp}_attempt_{attempt}.png"
            page.screenshot(path=after_path, full_page=True)
            
            result['url'] = current_url
            body_lower = body_text.lower()
            
            # Analyser le r√©sultat
            if 'sorry, you have been blocked' in body_lower:
                result['status'] = 'BLOCKED'
                result['message'] = "Bloqu√© par Cloudflare"
                
            elif 'error=invalidcaptcha' in current_url.lower():
                result['status'] = 'INVALID_CAPTCHA'
                result['message'] = f"Captcha '{captcha_text}' invalide"
                
            elif '/creneau/' in current_url:
                result['status'] = 'SUCCESS'
                result['message'] = "Acc√®s aux cr√©neaux r√©ussi"
                
                # Analyser la disponibilit√©
                if 'aucun cr√©neau disponible' in body_lower:
                    result['available'] = False
                    result['message'] += " - Aucun cr√©neau disponible"
                elif 'choisissez votre cr√©neau' in body_lower or 's√©lectionnez' in body_lower:
                    result['available'] = True
                    result['message'] += " - CR√âNEAUX DISPONIBLES!"
                else:
                    result['available'] = False
                    result['message'] += " - Statut ind√©termin√©"
                    
            else:
                result['status'] = 'OTHER'
                result['message'] = "R√©ponse inconnue"
                result['url'] = current_url
            
            return result
            
        except Exception as e:
            result['message'] = f"Erreur: {str(e)}"
            logger.error(f"Erreur tentative {attempt}: {e}")
            return result
    
    def scan_with_retry(self):
        """
        Lance un scan avec retry automatique
        
        Returns:
            Dict avec le r√©sultat final
        """
        logger.info("=" * 60)
        logger.info("üéØ D√âBUT DU SCAN AVEC RETRY")
        logger.info("=" * 60)
        
        with sync_playwright() as p:
            browser = p.chromium.launch(
                headless=self.headless,
                args=['--disable-blink-features=AutomationControlled']
            )
            
            context = browser.new_context(
                viewport={'width': 1366, 'height': 768},
                user_agent='Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
            )
            
            page = context.new_page()
            final_result = None
            
            try:
                for attempt in range(1, self.max_retries + 1):
                    logger.info(f"üîÑ TENTATIVE {attempt}/{self.max_retries}")
                    
                    result = self.try_captcha_submission(page, attempt)
                    
                    if result['status'] == 'SUCCESS':
                        logger.info(f"üéâ SUCC√àS! {result['message']}")
                        final_result = result
                        break
                        
                    elif result['status'] == 'BLOCKED':
                        logger.warning(f"‚ùå BLOQU√â: {result['message']}")
                        final_result = result
                        break
                        
                    elif result['status'] == 'INVALID_CAPTCHA':
                        logger.warning(f"‚ùå CAPTCHA INVALIDE: {result['message']}")
                        if attempt < self.max_retries:
                            logger.info(f"üîÑ Retry dans 2s... ({attempt + 1}/{self.max_retries})")
                            time.sleep(2)
                        else:
                            logger.warning("‚ùå Maximum de tentatives atteint")
                            final_result = result
                    else:
                        logger.warning(f"‚ö†Ô∏è AUTRE: {result['message']}")
                        if attempt < self.max_retries:
                            logger.info("üîÑ Nouvelle tentative par pr√©caution...")
                            time.sleep(2)
                        else:
                            final_result = result
                            
            except Exception as e:
                logger.error(f"Erreur globale: {e}", exc_info=True)
                final_result = {
                    'status': 'ERROR',
                    'message': f"Erreur globale: {str(e)}",
                    'available': False
                }
                
            finally:
                browser.close()
                
        return final_result
    
    def run_once(self):
        """Lance un scan unique"""
        logger.info("üöÄ D√©marrage du scanner (mode unique)")
        
        result = self.scan_with_retry()
        
        # Afficher le r√©sultat final
        logger.info("=" * 60)
        logger.info("üìä R√âSULTAT FINAL:")
        logger.info(f"Status: {result['status']}")
        logger.info(f"Message: {result['message']}")
        if result.get('available'):
            logger.info("üéâ CR√âNEAUX DISPONIBLES D√âTECT√âS!")
            # Envoyer notification
            try:
                self.notifier.send_notification([{
                    'page': 'Pr√©fecture',
                    'url': self.url,
                    'available': True,
                    'message': result['message'],
                    'timestamp': datetime.now().isoformat()
                }])
            except Exception as e:
                logger.warning(f"Erreur notification: {e}")
        else:
            logger.info("üòî Pas de cr√©neaux disponibles")
        logger.info("=" * 60)
        
        return result
    
    def run_continuous(self):
        """Lance le scanner en mode continu"""
        logger.info(f"üîÑ D√©marrage du scanner en mode continu (intervalle: {self.check_interval}s)")
        
        scan_count = 0
        
        try:
            while True:
                scan_count += 1
                logger.info(f"üéØ SCAN #{scan_count} - {datetime.now().strftime('%H:%M:%S')}")
                
                result = self.scan_with_retry()
                
                # Notification si disponible
                if result.get('available'):
                    logger.info("üéâ CR√âNEAUX TROUV√âS! Notification envoy√©e.")
                    try:
                        self.notifier.send_notification([{
                            'page': 'Pr√©fecture',
                            'url': self.url,
                            'available': True,
                            'message': result['message'],
                            'timestamp': datetime.now().isoformat()
                        }])
                    except Exception as e:
                        logger.warning(f"Erreur notification: {e}")
                
                # Attendre avant le prochain scan
                logger.info(f"‚è≥ Prochain scan dans {self.check_interval} secondes...")
                time.sleep(self.check_interval)
                
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è Arr√™t du scanner par l'utilisateur")
        except Exception as e:
            logger.error(f"Erreur fatale: {e}", exc_info=True)


def main():
    """Point d'entr√©e principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Scanner RDV Pr√©fecture Optimis√©')
    parser.add_argument('--once', action='store_true', help='Ex√©cuter une seule fois')
    parser.add_argument('--continuous', action='store_true', help='Ex√©cuter en continu')
    
    args = parser.parse_args()
    
    try:
        scanner = OptimizedRDVScanner()
        
        if args.once:
            scanner.run_once()
        else:
            scanner.run_continuous()
            
    except Exception as e:
        logger.error(f"Erreur fatale: {e}", exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    main()